name: Deploy to Render

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx
    
    - name: Run linting
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        # Create a simple test file
        cat > test_app.py << 'EOF'
        from fastapi.testclient import TestClient
        from main import app
        
        client = TestClient(app)
        
        def test_health():
            response = client.get("/health")
            assert response.status_code == 200
            assert response.json()["status"] == "healthy"
        
        def test_home():
            response = client.get("/")
            assert response.status_code == 200
        
        def test_api_docs():
            response = client.get("/docs")
            assert response.status_code == 200
        EOF
        
        pytest test_app.py -v
    
    - name: Build Docker image
      run: |
        docker build -t credit-risk-app .
        docker run -d -p 8000:8000 --name test-app credit-risk-app
        sleep 10  # Wait for app to start
        
    - name: Test Docker container
      run: |
        curl -f http://localhost:8000/health || exit 1
        docker logs test-app
        docker stop test-app
    
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Render
      env:
        RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
        RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      run: |
        curl -X POST \
          "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
          -H "Authorization: Bearer ${RENDER_API_KEY}" \
          -H "Content-Type: application/json" \
          -d '{"clearCache": false}'
    
    - name: Wait for deployment
      run: sleep 60
    
    - name: Verify deployment
      run: |
        curl -f https://your-app.onrender.com/health || exit 1